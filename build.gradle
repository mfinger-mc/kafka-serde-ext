// Release command:
// $ gradle clean build zip # (optionally 'publish' to release new version in Maven repository)

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'jacoco'

group = 'io.macronova.kafka'
version = '1.1.0'


sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

repositories {
	mavenCentral()
}

sourceSets {
	examples {
		java.srcDir file( 'src/examples/java' )
		resources.srcDir file( 'src/examples/resources' )
		compileClasspath += sourceSets.main.output + configurations.compileOnly
		runtimeClasspath += output + compileClasspath
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled false
	}
}

jacoco {
    toolVersion = "0.8.5"

}

check.dependsOn jacocoTestReport

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom {
				name = 'Kafka SerDe ExtensionsJDK11'
				description = 'Extensions to Kafka serializers and deserializers.'
				url = 'https://github.com/macronova/kafka-serde-ext'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				scm {
					connection = 'scm:git:git://github.com/mfinger-mc/kafka-serde-ext.git'
					developerConnection = 'scm:git:ssh://github.com:mfinger-mc/kafka-serde-ext.git'
					url = 'https://github.com/mfinger-mc/kafka-serde-ext'
				}
			}
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/mfinger-mc/kafka-serde-ext")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
			}
		}
	}
}

dependencies {
	compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.66'
	compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.5.1'
	compileOnly group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.30'

	testCompile group: 'junit', name: 'junit', version: '4.12'

	testCompile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version:'1.66' // Used for keystore with RSA key pair generation.
	testCompile group: 'org.apache.kafka', name: 'kafka_2.12', version: '2.5.1'
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-migrationsupport', version: '5.6.2'
	testCompile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.5.1', classifier: 'test'

	testCompile group: 'org.assertj', name: 'assertj-core', version: '3.16.1'
	testCompile group: 'org.springframework.kafka',name:'spring-kafka', version: '2.5.5.RELEASE'
	testCompile (group: 'org.springframework.kafka', name:'spring-kafka-test',version:'2.5.5.RELEASE')
}



task zip(type: Zip) {
	from configurations.runtime.allArtifacts.files
	from configurations.runtime
	into (project.name + '-' + project.version)
}

wrapper {
	gradleVersion = '6.5.1'
}

idea {
	module {
		sourceDirs += file('src/examples/java')
		resourceDirs += file('src/examples/resources')
	}
}